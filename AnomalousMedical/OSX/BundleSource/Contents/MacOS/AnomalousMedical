#!/bin/sh
#
# This is a stub script that allows .apps to be relocatable on OSX but still
# find the managed assembly.
#
# It has been modified from the original macpack version to instead run an 
# embedded mono runtime in the same app bundle.
#

X11_MODE=0
MWF_MODE=0
COCOASHARP_MODE=1

PWD=`pwd`
# Fetch the path relative to the launch point where this shell script exists.
APP_PATH=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+3] != "") { if (patharr[idx] != "/") {printf("%s/", patharr[idx]); idx++ }} }'`

# Fetch the app name (its our own name)
APP_NAME=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+1] != "") {idx++} printf("%s", patharr[idx]); }'`
ASSEMBLY=`echo $0 | awk '{split($0,patharr,"/"); idx=1; while(patharr[idx+1] != "") {idx++} printf("%s.exe", patharr[idx]); }'`

# Setup the environment for MWF if needed
if [ "$MWF_MODE" -eq "1" ]; then
	export MONO_MWF_USE_CARBON_BACKEND=1
	export GDIPLUS_NOX=1
fi

# Setup the environment for Cocoa# if needed
if [ "$COCOASHARP_MODE" -eq "1" ]; then
	export MONO_GDIP_USE_COCOA_BACKEND=1
	export DYLD_LIBRARY_PATH=$PWD/$APP_PATH/Contents/Resources:$DYLD_LIBRARY_PATH
fi

#Setup the mono directories
export MONO_CFG_DIR=../Frameworks/Mono.Framework/cfg
export MONO_PATH="$APP_PATH/Contents/Frameworks/Mono.framework/lib"
export FONTCONFIG_PATH="../Frameworks/Mono.framework/etc/fonts"

#Run the program
cd "$APP_PATH/Contents/Resources"

"$APP_PATH/Contents/Frameworks/Mono.framework/bin/mono" "./$APP_NAME.exe"
